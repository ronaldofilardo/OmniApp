generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model event_conflict_overrides {
    id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id              String
    event_id             String?
    override_at          DateTime? @default(now()) @db.Timestamptz(6)
    overridden_conflicts Json?
}

model event_files {
    id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    event_id     String    @db.Uuid
    user_id      String    @db.Uuid
    file_name    String    @db.VarChar(255)
    file_path    String?   @db.VarChar(255) // Tornando opcional para compatibilidade
    file_content String?   @db.Text // Novo campo para Base64
    mime_type    String    @db.VarChar(100)
    file_type    String    @db.VarChar(50)
    uploaded_at  DateTime? @default(now()) @db.Timestamptz(6)
    viewed_at    DateTime? @db.Timestamp(6)
    is_orphan    Boolean?  @default(false)
    orphaned_at  DateTime? @db.Timestamptz(6)
    events       events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@unique([event_id, file_type], map: "unique_event_file_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model events {
    id                        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id                   String         @db.Uuid
    type                      String         @db.VarChar(50)
    professional              String         @db.VarChar(100)
    event_date                DateTime       @db.Date
    start_time                DateTime       @db.Time(6)
    end_time                  DateTime       @db.Time(6)
    notes                     String?
    instructions              String?        @db.VarChar(50)
    created_at                DateTime?      @default(now()) @db.Timestamptz(6)
    deleted_at                DateTime?      @db.Timestamptz(6)
    upload_code_hash          String?        @db.VarChar(255)
    upload_code_expires_at    DateTime?      @db.Timestamp(6)
    upload_code_status        String?        @db.VarChar(20)
    treatment_total_doses     Int?
    treatment_alert_threshold Int?
    stock_quantity            Int?
    schedule_return_reminder  Boolean        @default(false)
    event_files               event_files[]
    reminders                 reminders[]
    users                     users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
    upload_codes              upload_codes[]

    @@index([user_id], map: "idx_events_user_id")
}

model professionals {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id    String    @db.Uuid
    name       String    @db.VarChar(100)
    specialty  String    @db.VarChar(100)
    address    String?   @db.VarChar(255)
    contact    String?   @db.VarChar(50)
    created_at DateTime? @default(now()) @db.Timestamptz(6)
    deleted_at DateTime? @db.Timestamptz(6)
    users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

    @@unique([user_id, name, specialty], map: "unique_user_professional")
    @@index([user_id, name, specialty], map: "idx_professionals_user_name_specialty")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reminders {
    id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id          String    @db.Uuid
    related_event_id String?   @db.Uuid
    title            String    @db.VarChar(255)
    due_date         DateTime  @db.Date
    is_completed     Boolean   @default(false)
    completed_at     DateTime? @db.Timestamptz(6)
    created_at       DateTime  @default(now()) @db.Timestamptz(6)
    updated_at       DateTime  @default(now()) @db.Timestamptz(6)
    events           events?   @relation(fields: [related_event_id], references: [id], onUpdate: NoAction)

    @@index([user_id], map: "idx_reminders_user_id")
}

model sharing_sessions {
    id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id          String    @db.Uuid
    token            String    @unique
    access_code_hash String
    file_ids         String[]  @db.Uuid
    expires_at       DateTime  @db.Timestamptz(6)
    status           String    @default("pending") @db.VarChar(20)
    created_at       DateTime? @default(now()) @db.Timestamptz(6)
}

model upload_codes {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    event_id   String    @db.Uuid
    user_id    String    @db.Uuid
    file_type  String    @db.VarChar(50)
    plain_code String?   @db.VarChar(20)
    code_hash  String    @db.VarChar(255)
    expires_at DateTime  @db.Timestamptz(6)
    status     String    @default("active") @db.VarChar(20)
    created_at DateTime? @default(now()) @db.Timestamptz(6)
    events     events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@unique([event_id, file_type], map: "unique_event_file_type_code")
    @@index([code_hash], map: "idx_upload_codes_code_hash")
}

model users {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    email              String               @unique @db.VarChar(100)
    password_hash      String               @db.VarChar(255)
    created_at         DateTime?            @default(now()) @db.Timestamptz(6)
    events             events[]
    professionals      professionals[]
    upload_codes       upload_codes[]
    notifications      notifications[]
    push_subscriptions push_subscriptions[]
}

model notifications {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id    String   @db.Uuid
    message    String
    type       String   @db.VarChar(20)
    status     String   @default("unread") @db.VarChar(20)
    action_url String?
    created_at DateTime @default(now()) @db.Timestamptz(6)
    users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id], map: "idx_notifications_user_id")
}

model push_subscriptions {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id    String   @db.Uuid
    endpoint   String
    p256dh     String
    auth       String
    created_at DateTime @default(now()) @db.Timestamptz(6)
    users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([user_id, endpoint], map: "unique_user_endpoint")
}
